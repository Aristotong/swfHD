package com.completeperspective.media.components {		import com.completeperspective.media.players.*;	import com.completeperspective.media.model.*;	import com.completeperspective.media.events.*;		import caurina.transitions.*;		import flash.display.*;	import flash.geom.*;	import flash.media.*;	import flash.text.*;	import flash.events.*;	/**	 * @author adam	 */	public class PlayerControls extends MovieClip	{		private var _soundTransform : SoundTransform;				private var xOffset : Number;		var xMin:Number = 0;		var xMax:Number = 1;		var volOffset:Number;		var volxMin:Number = 0;		var volxMax:Number = 70;		var volPercent:Number =1;		var volScrubber_mc : MovieClip = new MovieClip();		private var _player : ProgressiveVideo;				public function PlayerControls( ) {			_soundTransform = new SoundTransform();			init();		}				public function setWidth( width : Number ) : void		{			var glass : MovieClip = getChildByName( "glass_mc" ) as MovieClip;			var bg : MovieClip = getChildByName( "background_mc" ) as MovieClip;			glass.width = bg.width = width;		}				public function set player( p_player : ProgressiveVideo ) : void		{			_player = p_player;		}		public function get player() : ProgressiveVideo		{			return _player;		}				private function init() : void		{			alpha = 0;						xMin = track_mc.x - thumb_mc.width / 2;			xMax = track_mc.x + track_mc.width;						track_mc.addEventListener(MouseEvent.MOUSE_OVER, trackOver);			track_mc.addEventListener(MouseEvent.MOUSE_OUT, trackOut);			track_mc.addEventListener(MouseEvent.CLICK, goToSecond);			track_mc.addEventListener(MouseEvent.MOUSE_DOWN, trackDown);			track_mc.addEventListener(MouseEvent.MOUSE_UP, trackUp);						playPause_mc.addEventListener(MouseEvent.CLICK, pause);			playPause_mc.addEventListener(MouseEvent.MOUSE_OVER, rollOnToggle);			playPause_mc.addEventListener(MouseEvent.MOUSE_OUT, rollOffToggle);						volume_mc.addEventListener(MouseEvent.CLICK, mute);			volume_mc.addEventListener(MouseEvent.MOUSE_OVER, rollOnSpeaker);			volume_mc.addEventListener(MouseEvent.MOUSE_OUT, rollOffSpeaker);						//volScrubber_mc.volThumb_mc.addEventListener(MouseEvent.MOUSE_DOWN, volDown);			//volScrubber_mc.volThumb_mc.addEventListener(MouseEvent.MOUSE_UP, volUp);						playlistButton_mc.addEventListener(MouseEvent.CLICK, showPlaylistView );			//playlistButton_mc.addEventListener(MouseEvent.MOUSE_OVER, rollOnSpeaker);			//playlistButton_mc.addEventListener(MouseEvent.MOUSE_OUT, rollOffSpeaker);						fullScreen_mc.addEventListener( MouseEvent.CLICK, handleFullScreen );			fullScreen_mc.addEventListener( MouseEvent.ROLL_OUT, handleRollOut );			fullScreen_mc.addEventListener( MouseEvent.ROLL_OVER, handleRollOver );		}				private function handleRollOver( e : MouseEvent ) : void		{			var tooltip : MovieClip = e.currentTarget.toolTip_mc;			Tweener.addTween( tooltip, { alpha: 1, time:2 } );		}				private function handleRollOut( e : MouseEvent ) : void		{			var tooltip : MovieClip = e.currentTarget.toolTip_mc;			Tweener.addTween( tooltip, { alpha: 0, time:2 } );		}				private function showPlaylistView( e : MouseEvent ) : void		{			//trace( "Ready to show playlist view" );			dispatchEvent( new MediaPlayerEvent( MediaPlayerEvent.SHOW_PLAYLIST_VIEW) );		}				private function handleFullScreen( e : MouseEvent ) : void		{			_player.handleFullScreen();			trace( "Anythng?" );						if(stage.displayState == StageDisplayState.NORMAL)			{							}			else			{							}		}				private function trackOver(e:MouseEvent):void		{			//trace( "track over")			stage.addEventListener(MouseEvent.MOUSE_MOVE, startFollow);			xOffset = mouseX - thumb_mc.x;		}				private function trackOut(e:MouseEvent):void		{			//trace( "track out")			stage.removeEventListener(MouseEvent.MOUSE_MOVE, startFollow);			stage.removeEventListener(Event.ENTER_FRAME, getTimeText);			thumb_mc.alpha = 0; 		}				private function startFollow(e:MouseEvent):void		{			thumb_mc.alpha = 1;			thumb_mc.x = mouseX - (thumb_mc.width / 2);			if(thumb_mc.x <= xMin)				thumb_mc.x = xMin;			if(thumb_mc.x >= xMax)				thumb_mc.x = xMax;						stage.addEventListener(Event.ENTER_FRAME, getTimeText);			e.updateAfterEvent();		}				private function getTimeText(e:Event):void		{			//var percentAcross:Number = (thumb_mc.x + (thumb_mc.width / 2)) / (track_mc.width);			var percentAcross : Number = ( thumb_mc.x - (thumb_mc.width/2) ) / track_mc.width;			thumb_mc.trackTime_mc.text = _player.getTimeCode( player.media.duration * percentAcross );		}				private function goToSecond(e:MouseEvent):void		{			if(track_mc.mouseX < dlStatus_mc.width)			{				var percentAcross : Number = ( thumb_mc.x - (thumb_mc.width/2) ) / track_mc.width;				player.ns.seek( player.media.duration * percentAcross);			}		}				private function trackDown(e:MouseEvent):void		{			stage.addEventListener(MouseEvent.MOUSE_MOVE, scrubTo);			xOffset = mouseX - thumb_mc.x;		}				private function trackUp(e:MouseEvent):void		{			stage.removeEventListener(MouseEvent.MOUSE_MOVE, scrubTo);		}				private function scrubTo(e:MouseEvent):void		{			if(track_mc.mouseX < dlStatus_mc.width)			{				var percentAcross:Number = (thumb_mc.x - 12) / 290;				player.ns.seek( player.media.duration * percentAcross);			}		}				private function pause(e:MouseEvent):void		{			player.ns.togglePause();						if(playPause_mc.currentFrame == 1)			{				playPause_mc.gotoAndStop(2);			}			else			{				playPause_mc.gotoAndStop(1);			}		}				private function rollOnToggle(e:MouseEvent):void		{			playPause_mc.alpha = 1;		}				private function rollOffToggle(e:MouseEvent):void		{			playPause_mc.alpha = .75;		}				function mute(e:MouseEvent):void		{			if( volume_mc.currentFrame == 1)			{				_soundTransform.volume = 0;				player.ns.soundTransform = _soundTransform;				volume_mc.gotoAndStop(2);			}			else			{				_soundTransform.volume = volPercent;				player.ns.soundTransform = _soundTransform;				volume_mc.gotoAndStop(1);			}		}				function rollOnSpeaker(e:MouseEvent):void		{			volume_mc.alpha = 1;		}				function rollOffSpeaker(e:MouseEvent):void		{			volume_mc.alpha = .75;		}				function volDown(e:MouseEvent):void		{			stage.addEventListener(MouseEvent.MOUSE_MOVE, volAdjust);		}				function volUp(e:MouseEvent):void		{			stage.removeEventListener(MouseEvent.MOUSE_MOVE, volAdjust);		}				function volAdjust(e:MouseEvent):void		{			volScrubber_mc.volThumb_mc.x = volScrubber_mc.volTrack_mc.mouseX;			if(volScrubber_mc.volThumb_mc.x <= volxMin)				volScrubber_mc.volThumb_mc.x = volxMin;			if( volScrubber_mc.volThumb_mc.x >= volxMax)				volScrubber_mc.volThumb_mc.x = volxMax;				volPercent =  volScrubber_mc.volThumb_mc.x / volxMax;			if(volume_mc.currentFrame == 1)				_soundTransform.volume = volPercent;				player.ns.soundTransform = _soundTransform;				e.updateAfterEvent();		}			}}