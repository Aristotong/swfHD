package com.completeperspective.media.players{	import com.completeperspective.media.components.*;	import com.completeperspective.media.net.*;	import com.completeperspective.media.events.*;		import caurina.transitions.*;		import flash.display.*;	import flash.geom.*;	import flash.net.*;	import flash.media.*;	import flash.events.*;		/**	 * @author adam	 */	public class FlashH264 extends MovieClip	{		private var _nc : NetConnection;		private var _ns : NetStream;		private var _video : Video;				private var _client : FlashClient;		private var _file : String;		private var _hotSpot : Sprite;		private var _duration : Number = 0;		private var _displayHours : Boolean = true;		private var _controls : PlayerControls;		private var _allowSmoothing : Boolean = false;		private var _scaleMode : String = "ScaleToSWF"; // Can either be 'FullResolution' or 'ScaleToSWF'		private var _docWidth : Number = 1280;		private var _docHeight : Number = 720;		private var _savedWidth : Number = 0;		private var _savedHeight : Number = 0;		private var _savedSmoothing : Boolean;		private var _savedDeblocking : Number;				private var isReady : Boolean = false;						public function FlashH264()		{			stage.scaleMode = StageScaleMode.NO_SCALE;            stage.align = StageAlign.TOP_LEFT;			root.loaderInfo.addEventListener(Event.COMPLETE, getDocDimensions);						stage.addEventListener(Event.ACTIVATE, activateHandler);            stage.addEventListener(Event.RESIZE, resizeHandler);        }				private function getDocDimensions( e : Event ) : void		{			trace("stageWidth: " + root.loaderInfo.width + " stageHeight: " + root.loaderInfo.height);			init();					}        private function activateHandler(event:Event):void {            trace("activateHandler: " + event);        }        private function resizeHandler(event:Event):void {            trace("resizeHandler: " + event);            trace("stageWidth: " + stage.stageWidth + " stageHeight: " + stage.stageHeight);			if( stage.displayState == StageDisplayState.NORMAL ) {				_video.width = _savedWidth;				_video.height = _savedHeight;								if( _savedWidth < _video.videoWidth ){					_video.smoothing = true;				}								_hotSpot.graphics.clear();				_hotSpot.graphics.lineStyle( 0,0,0);				_hotSpot.graphics.beginFill(0,0);				_hotSpot.graphics.drawRect(0, 0, _video.width, _video.height);				_hotSpot.graphics.endFill();							_controls.x = _video.width / 2 - _controls.width / 2;				_controls.y = _video.height - _controls.height - 10;											}        }				private function init() : void		{			addEventListener(Event.ENTER_FRAME, handleEnterFrame );						try {		    	var keyStr:String;		    	var valueStr:String;		    	var paramObj:Object = LoaderInfo(this.root.loaderInfo).parameters;			   			    for (keyStr in paramObj) {			        valueStr = String(paramObj[keyStr]);			        trace("\t" + keyStr + ":\t" + valueStr + "\n");			    }			    			   	if( paramObj["file"] )			   		_file = paramObj["file"];				if( paramObj["allowSmoothing"] )					_allowSmoothing = paramObj["allowSmoothing"];				if( paramObj["scaleMode"] )					_scaleMode = paramObj["scaleMode"];				if( paramObj["width"] )					_docWidth = paramObj["width"];				if( paramObj["height"] )					_docHeight = paramObj["height"];			    			} catch (error:Error) {			    trace(error.toString());			}												_video = new Video();			_video.smoothing = _allowSmoothing;									addChild( _video );									_hotSpot = new Sprite();			stage.addEventListener( MouseEvent.MOUSE_OVER, handleMouseOver );			stage.addEventListener( MouseEvent.MOUSE_OUT, handleMouseOut );			addChild( _hotSpot );						_controls = new PlayerControls();			_controls.player = this;			_controls.alpha = 0;			addChild( _controls );						_client = new FlashClient( _video );			//_client.addEventListener( PlayerEvent.METADATA_RECEIVED, handleMetadata );						_nc = new NetConnection();			_nc.client = _client;			_nc.addEventListener( NetStatusEvent.NET_STATUS, handleNetStatus );			_nc.connect( null );					}				private function handleNetStatus( e : NetStatusEvent ) : void		{			trace( e.info.code );			switch( e.info.code ) 			{				case "NetConnection.Connect.Success":					handleNetConnectionSuccess();					break;			}		}				private function handleNetConnectionSuccess() : void		{			_ns = new NetStream( _nc );			_ns.client = _client;			_ns.addEventListener( NetStatusEvent.NET_STATUS, handleNetStatus );						_video.attachNetStream( _ns );			trace( "FILE: " + _file );			_ns.play( _file );		}				private function handleMetadata( e : Object ) : void		{			if( _scaleMode == "FullResolution" ) {				_video.width = e.data.width;				_video.height = e.data.height;			} else {				_video.width = _docWidth;				_video.height = _docHeight;			}						_duration = e.data.duration;						_hotSpot.graphics.clear();			_hotSpot.graphics.lineStyle( 0,0,0);			_hotSpot.graphics.beginFill(0,0);			_hotSpot.graphics.drawRect(0, 0, _video.width, _video.height);			_hotSpot.graphics.endFill();						var bottom : Number;			if( _docWidth < 768 ) {				bottom = 0;			} else {				bottom = 10;			}							_controls.x = _docWidth / 2 - _controls.width / 2;			_controls.y = _docHeight - _controls.height - bottom;			}								public function handleFullScreen( ) : void		{			/*			if( stage.displayState == StageDisplayState.NORMAL ) {								// when going out of full screen mode 				// we use these values				_savedWidth = _video.width;				_savedHeight = _video.height;				_savedSmoothing = _video.smoothing;				_savedDeblocking = _video.deblocking;			 				// Set the size of the video object to the 				// original size of the video stream				_video.width = _video.videoWidth;				_video.height = _video.videoHeight;				_video.smoothing = false;				_video.deblocking = 0;								_controls.x = _video.width / 2 - _controls.width / 2;				_controls.y = _video.height - _controls.height - 10;												_hotSpot.graphics.clear();				_hotSpot.graphics.lineStyle( 0,0,0);				_hotSpot.graphics.beginFill(0,0);				_hotSpot.graphics.drawRect(0, 0, _video.width, _video.height);				_hotSpot.graphics.endFill();									stage.fullScreenSourceRect = new Rectangle(					   _video.x, _video.y, 					   _video.videoWidth, _video.videoHeight);			 				stage.displayState = StageDisplayState.FULL_SCREEN;			} else {				stage.displayState = StageDisplayState.NORMAL;			}			*/				}						private function handleEnterFrame(e:Event):void		{			var nowSecs:Number = Math.floor(_ns.time);				var totalSecs:Number = Math.round(_duration);						if(nowSecs > 0)			{				_controls.timeCode_txt.text = getTimeCode(nowSecs) + " / " + getTimeCode(totalSecs);				var amountPlayed:Number = _ns.time / _duration;				var amountLoaded:Number = _ns.bytesLoaded / _ns.bytesTotal;				//_controls.playStatus_mc.x = 46;				_controls.playStatus_mc.width = 240 * amountPlayed - 1;				//_controls.dlStatus_mc.x = 46;				_controls.dlStatus_mc.width = 240 * amountLoaded + 3;			}		}				private function handleMouseOver(e:MouseEvent):void		{			Tweener.addTween( _controls, {alpha:1, time:3});		}				private function handleMouseOut(e:MouseEvent):void		{			Tweener.addTween( _controls, {alpha:0, time:3});		}						public function getTimeCode( myTime : Number ) : String 		{			var tempNum = myTime;			var minutes = Math.floor(tempNum / 60);						if (_displayHours) 			{				var hours = Math.floor(minutes / 60);			}			var seconds = Math.round(tempNum - (minutes * 60));						if (seconds < 10) 			{				seconds = "0" + seconds;			}			if (minutes < 10) 			{				minutes = "0" + minutes;			}						if (_displayHours) 			{				if (hours < 10) 				{					hours = "0" + hours;				}			}						var timeCode : String = hours + ":" + minutes + ":" + seconds;						return timeCode;		}				public function get ns() : NetStream		{			return _ns;		}				public function get duration() : Number		{			return _duration;		}				public function get video() : Video		{			return _video;		}	}}